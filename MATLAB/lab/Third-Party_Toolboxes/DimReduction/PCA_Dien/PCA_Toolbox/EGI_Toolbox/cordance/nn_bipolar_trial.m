function [nn_trialdata,new_bad_chan] = nn_bipolar_trial(fft_trialdata,nearest_neighbours,bad_chan)use_chan_mask = zeros(1,129);use_chan_mask(nearest_neighbours(1,:)) = ones(1,length(nearest_neighbours(1,:)));use_chan_mask(bad_chan) = zeros(1,length(bad_chan));fft_trialdata = fft_trialdata.*(ones(size(fft_trialdata,1),1)*use_chan_mask);stack = zeros(1,129);nn_trialdata = zeros(size(fft_trialdata,1),129);nearest_neighbours(find(nearest_neighbours == 0)) = 129*ones(size(find(nearest_neighbours == 0)));for i = 2:size(nearest_neighbours,1)	temp = zeros(size(fft_trialdata,1),size(fft_trialdata,2));	temp(:,nearest_neighbours(1,:)) = fft_trialdata(:,nearest_neighbours(i,:));		temp2 = abs(fft_trialdata - temp).^2;	temp3 = sum(abs(temp));	good_pair = find(temp3);	masky = zeros(1,129);	masky(good_pair) = ones(1,length(good_pair));	stack = stack+masky;	nn_trialdata = nn_trialdata + temp2;end;nn_trialdata(:,find(use_chan_mask)) = nn_trialdata(:,find(use_chan_mask))./(ones(size(nn_trialdata,1),1)*ones(1,length(find(use_chan_mask))));new_bad_chan = find(use_chan_mask == 0);nn_trialdata(:,new_bad_chan) = zeros(size(nn_trialdata,1),length(new_bad_chan));		