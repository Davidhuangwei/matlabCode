function cordance(seconds,bad_chan,output_freqs)%Calculates measures for Leuchter lab.  %%parameters%%parameter input can be done through a graphical interface.  %To use this feature, simply type cord at the prompt and return%%seconds = list of seconds to use from start of file, e.g. [6:13 17:22]%	default = entire file%%bad_chan = list of bad_channels, e.g. [13 45 68]%	default = no bad channels%%output_freqs = center frequencies of 4 Hz bands for topographic maps and ascii output. %				e.g., [2 6 10 20] requests topographic maps for 2 6 10 and 20 Hz%	default = [6 10 20]%%topographic maps are saved as pict files %ascii output is in flat ascii with channels as rows and frequencies as columns%both the ascii files and pict files are placed in the same directory as the data file. %				 	global code_path%Buttonname = questdlg('Which file type?','FILE TYPE','QND','NetStation RAW','NetStation RAW');%switch Buttonname%	case 'QND'%		errordlg('QND interface still needs testing','ERROR')%		return%end% read in NS header[fid, rawfname] = get_fid('rb');if (fid < 0)	error('error opening data file')	fclose('all')end;[header_array, EventCodes,Samp_Rate, NChan, scale, NSamp, NEvent] = rd_fragger_hdr(fid);NSec = fix(NSamp/Samp_Rate);if nargin < 1	prompt = {'Seconds to use:','Bad Channels:','Output Frequencies:'};	MSec = num2str(NSec);	def = {['1:' MSec],' ','6 10 20'};	titlebox='CORDANCE PARAMETERS';	lineNo = 1;		answer=inputdlg(prompt,titlebox,lineNo,def);	s = struct('field1',answer(1,:),'field2',answer(2,:),'field3',answer(3,:));	seconds = str2num(getfield(s,'field1'));	bad_chan = str2num(getfield(s,'field2'));	output_freqs = str2num(getfield(s,'field3'));endif isempty(seconds)	disp('USING ENTIRE FILE')	seconds = [1:NSec];end;if isempty(output_freqs)	output_freqs = [6 10 20];end;plot_res = 100;seconds_mask = zeros(1,NSec);seconds_mask(seconds) = ones(1,length(seconds));channel_mask = ones(1,129);channel_mask(bad_chan) = zeros(1,length(bad_chan));Epoch = 1;nearest_fname = ['''' code_path 'cordance:default.nbrs'''];eval(['load ' nearest_fname]);nearest_neighbours = default';nn_average = zeros(Samp_Rate*Epoch,129);for j = 1:NSec	if	seconds_mask(j) ~= 0		trialdata = fread(fid,[NChan+NEvent,Samp_Rate*Epoch],'integer*2'); 		trialdata2 = zeros(size(trialdata,2),129);		trialdata2(:,1:NChan) = trialdata(1:NChan,:)';		trialdata2 = trialdata2*scale;		fft_trialdata = fft(zeromean(trialdata2))/(Samp_Rate*Epoch+1);		[nn_trialdata, new_bad_chan] = nn_bipolar_trial(fft_trialdata,nearest_neighbours,bad_chan);		nn_average = nn_average + nn_trialdata;	else		skip_bytes = (NChan+NEvent)*Samp_Rate*Epoch*2;		fseek(fid,skip_bytes,'cof');	end;end;absolute_power = zeros(41,129);absolute_power = sqrt(nn_average(1:41,:));total_power = sum(absolute_power);total_power(find(total_power == 0)) = ones(size(find(total_power == 0)));relative_power = absolute_power./(ones(41,1)*total_power);output_bins = output_freqs + 1;exp_relative_power = zeros(size(output_freqs,2),129);exp_absolute_power = zeros(size(output_freqs,2),129);for j = 1:size(output_freqs,2)	exp_relative_power(j,:) = sum(relative_power(output_bins(j)-2:output_bins(j)+2,:));	exp_absolute_power(j,:) = sum(absolute_power(output_bins(j)-2:output_bins(j)+2,:));end;masky = ones(1,129);masky(new_bad_chan) = zeros(1,length(new_bad_chan));new_good_chan = find(masky);table_relative_power = [new_good_chan' exp_relative_power(:,new_good_chan)'];table_absolute_power = [new_good_chan' exp_absolute_power(:,new_good_chan)'];relfilename = [rawfname '.rel.asc'];absfilename = [rawfname '.abs.asc'];table_relative_power(find(table_relative_power == 0)) = (1/10^6)*ones(size(find(table_relative_power == 0)));table_absolute_power(find(table_absolute_power == 0)) = (1/10^6)*ones(size(find(table_absolute_power == 0)));dlmwrite(relfilename,table_relative_power,'\t');dlmwrite(absfilename,table_absolute_power,'\t');	z_relative_power = z_transform(table_relative_power(:,2:size(output_freqs,2)+1));	z_absolute_power = z_transform(table_absolute_power(:,2:size(output_freqs,2)+1));cordance_intensity = z_relative_power+z_absolute_power;cordance_angle = 180*angle(z_relative_power+i*z_absolute_power)/pi;intfilename = [rawfname '.int.asc'];angfilename = [rawfname	'.ang.asc'];cordance_intensity(find(cordance_intensity == 0)) = (1/10^6)*ones(size(find(cordance_intensity == 0)));cordance_angle(find(cordance_angle == 0)) = (1/10^6)*ones(size(find(cordance_angle == 0)));cordance_intensity = [new_good_chan' cordance_intensity];cordance_angle = [new_good_chan' cordance_angle];dlmwrite(intfilename,cordance_intensity,'\t');dlmwrite(angfilename,cordance_angle,'\t');fclose('all');[xelec,yelec,zelec] = electrodes(129);ruu = sqrt(xelec(1)^2+yelec(1)^2+zelec(1)^2);[xs,ys,zs] = polgrid(plot_res,ruu);elecs = xyz2tp(xelec,yelec,zelec);elec_dot = zeros(129,2);for ij = 1:129	xt = xelec(ij)*ones(size(xs,1),size(xs,2));	yt = yelec(ij)*ones(size(xs,1),size(xs,2));	zt = zelec(ij)*ones(size(xs,1),size(xs,2));	dt = (xt - xs).^2 + (yt - ys).^2 +(zt - zs).^2;	[k1 k2] = find(dt == min(min(dt)));	elec_dot(ij,:) = [k1(1) k2(1)];end	hotter = hsv;%images maxrelpower = max(max(table_relative_power(:,2:size(output_freqs,2)+1)));for j = 1:size(output_freqs,2)image_fname = ['''' rawfname '.img.rel.' int2str(output_freqs(j)) ''''];temp = zeros(1,129);temp(new_good_chan) = table_relative_power(:,j+1)';outputmat = make_a_image(temp,new_bad_chan,plot_res,1,1,[]);maxmat = ceil(10*max(max(outputmat)))/10;imagesc(outputmat,[0 0.75]*maxrelpower)colormap([1 1 1; hotter(1:50,:)])hold oncontour(outputmat,[0],'b-')tempstring = ['RELATIVE POWER ' int2str(output_freqs(j) - 2) ' - ' int2str(output_freqs(j) + 2) ' Hz'];title(tempstring);plot(elec_dot(:,2),elec_dot(:,1),'ko')axis('off')colorbareval(['print ' image_fname ' -dpict']);close('all')end;realmaxabs = max(max(table_absolute_power(:,2:size(output_freqs,2)+1)));for j = 1:size(output_freqs,2)image_fname = ['''' rawfname '.img.abs.' int2str(output_freqs(j)) ''''];temp = zeros(1,129);temp(new_good_chan) = table_absolute_power(:,j+1)';[outputmat, max_mask] = make_a_image(temp,new_bad_chan,plot_res,1,1,[]);outputmat(find(outputmat < 0.05*realmaxabs)) = 0.05*realmaxabs*ones(size(find(outputmat < 0.05*realmaxabs)));outputmat = mask(xs,ys,zs,outputmat,max_mask);maxmat = ceil(10*max(max(outputmat)))/10;imagesc(outputmat,[0 0.75*realmaxabs])colormap([1 1 1;hotter(1:50,:)])hold oncontour(outputmat,[0],'b-')plot(elec_dot(:,2),elec_dot(:,1),'ko')title(['ABSOLUTE POWER ' int2str(output_freqs(j) - 2) ' - ' int2str(output_freqs(j) + 2) ' Hz'])axis('off')colorbareval(['print ' image_fname ' -dpict']);close('all')end;realmaxabs = max(max(cordance_intensity(:,2:size(output_freqs,2)+1)));for j = 1:size(output_freqs,2)image_fname = ['''' rawfname '.img.int.' int2str(output_freqs(j)) ''''];temp = zeros(1,129);temp(new_good_chan) = cordance_intensity(:,j+1)';[outputmat, max_mask] = make_a_image(temp,new_bad_chan,plot_res,1,1,[]);maxmat = ceil(10*max(max(outputmat)))/10;outputmat(find(outputmat <= 0.05*realmaxabs)) = 0.05*realmaxabs*ones(size(find(outputmat<=0.05*realmaxabs)));outputmat= mask(xs,ys,zs,outputmat,max_mask); imagesc(outputmat,[0 0.75*realmaxabs])colormap([1 1 1; hotter(1:50,:)])hold onplot(elec_dot(:,2),elec_dot(:,1),'ko')title(['INTENSITY ' int2str(output_freqs(j) - 2) ' - ' int2str(output_freqs(j) + 2) ' Hz'])axis('off')colorbareval(['print ' image_fname ' -dpict']);close('all')end;hotter2 = flipud(hotter);for j = 1:size(output_freqs,2)image_fname = ['''' rawfname '.img.ang.' int2str(output_freqs(j)) ''''];temp = zeros(1,129);temp(new_good_chan) = cordance_angle(:,j+1)';[outputmat, max_mask] = make_a_image(temp,new_bad_chan,plot_res,1,1,[]);outputmat(find(outputmat < -180)) = -180*ones(size(find(outputmat < -180)));outputmat = mask_val(xs,ys,zs,outputmat,max_mask,-195);maxmat = ceil(10*max(max(outputmat)))/10;imagesc(outputmat,[-195 180])colormap([1 1 1; hotter(1:50,:)])hold onplot(elec_dot(:,2),elec_dot(:,1),'ko')title(['ANGLE ' int2str(output_freqs(j) - 2) ' - ' int2str(output_freqs(j) + 2) ' Hz'])axis('off')colorbareval(['print ' image_fname ' -dpict']);close('all')end;