function status=make_gave(nfiles,bad_chan,bad_obs,outfname,infname)%function status=make_gave(nfiles,bad_chan,bad_obs,outfname,infname)%%version 2.0%Grand-average data in EGIS average files.%%This function accepts either 1, 2, 3, or 5 arguments. The first%argument is the number of files to be averaged together. If you specify%1 as nfiles, then it is assumed that there are multiple subjects per%cell. If nfiles is greater than one, it is assumed the files are single%subject average files. In this case the EGIS grand average file %header is taken from the first input filename specified through either%of the two means availible.%%If either outfname or infname are to be passed to this function, then%both must be given, and the function is fully batch processed without%addition user input. The infname matrix must have nfile rows, and each%row must be a string of equal length. If these two arguments are not given%then the function runs interactively, querying for an output filename and%nfiles input files.%%The argument bad_chan is a matrix with nfiles rows and no more columns %than there were channels of acquisition used to exclude globally bad %channels as determined by previous editing. If nfiles is 1 then rows %correspond to observations otherwise rows correspond to the file in the%equivalent row of infname.%%The argument bad_obs is used only if nfile is 1. In this case bad_obs%is an array specifying observations (i.e. subjects) to be excluded from the%grand average for all cells.%Modification History%%	written 9/17/95 p.m. RS%	defogged 9/18/95 a.m. RS%	bad_obs added and error checking expanded 11/27/95 p.m. BCR%	Code fixed for multi-file case, by BCR, 6/23/96%	Bad_Obs warning removed, 10/3/96 BCR%status = -1;%Check number of input argumentsif ~((nargin == 2)|(nargin == 3)|(nargin == 1)|(nargin == 5))	error('Number of input arguments must be either 1, 2, 3, or 5.');end%Check for correct use of Bad_Obs%if (nfiles > 1) & (bad_obs ~= [])%	disp('Warning: bad_obs argument is ignored when nfiles is greater than zero.');%end%Check input argument dimensions%if (nargin == 5)%	if ((size(infname,1) ~= nfiles) | (size(outfname,1) ~= nfiles))%		error('Indicated number of files not equal to number of rows in one or more input arguments.');%	end%end%Code fixed for multi-file case, by BCR, 6/23/96if (nargin == 5)	if (size(infname,1) ~= nfiles)		error('Indicated number of files not equal to input parameter nfiles.');	end	if (size(outfname,1) ~= 1)		error('Outfname parameter must be a single row vector.');	endend%Initialize fidsdestfid = -1;%First try batch modeif nargin == 5	for i = 1:size(infname,1)		srcfid(i) = fopen(infname(i,:), 'r');		if srcfid(i) == -1			error(['Could not open input file' infname '.']);		end	end;	destfid = fopen(outfname, 'wb');	if destfid == -1		temp =fclose(srcfid);	error(['Could not open output file ' outfname '.']);	end%Otherwise run interactive modeelseif nargin <= 3	if nargin < 2, bad_chan = zeros(nfiles,1);, end	if nargin < 3, bad_obs = [];, end	for i=1:nfiles		[srcfid(i), infname(i,:)]=get_fid('r','*.ave*', 'Open Average File:');	end	while destfid == -1		[destfid, outfname]=put_fid('wb','new.gave_bf','Save Grand Average File As:');	endendnfiles = size(srcfid,2);%Call EGIS hdr index scriptave_hdr_offsets_v;[fhdr,chdr,ename,czeros,cgains,cnames,fcom,ftext, coff]=rd_egis_hdr_v(srcfid(1));% Copy source header to destination fileif nfiles == 1	ave_chdr = chdr;	for c=1:fhdr(NCells)		ave_chdr(c,NObs) = 1;	end;else	ave_chdr = chdr;end;wt_ave_hdr_v(destfid,fhdr,ave_chdr,ename,cnames,fcom,ftext);for icell = 1:fhdr(NCells)	eval(['avgdata' int2str(icell) ' = zeros(fhdr(NChan),chdr(icell,NPoints));']);end;% global counterstack = zeros(1,fhdr(NChan));%Begin looping through files for ifile=1:nfiles%Read average file headerif ifile > 1	[fhdr,chdr,ename,czeros,cgains,cnames,fcom,ftext, coff]=rd_egis_hdr_v(srcfid(ifile));end;disp(['Processing file: ' int2str(ifile)]);%convert bad_chan into a maskif nfiles > 1	mask = ones(1,fhdr(NChan));	if sum(bad_chan(ifile,:)) > 0		for ibad = 1:size(bad_chan,2)			if bad_chan(ifile,ibad) > 0				mask(bad_chan(ifile,ibad)) = 0;			end;		end;	end;end;%Begin looping through cellsfor c=1:fhdr(NCells)	if nfiles > 1		trial_mask = ones(chdr(c,NPoints),1)*mask;	end;	%Loop through subject averages	for t=1:chdr(c,NObs)		if nfiles == 1			if any (t == bad_obs)				mask = zeros(1,fhdr(NChan));			else				mask = ones(1,fhdr(NChan));				if sum(bad_chan(ifile,:)) > 0					for ibad = 1:size(bad_chan,2)						if bad_chan(t,ibad) > 0							mask(bad_chan(t,ibad)) = 0;						end;					end;				end;			end;			trial_mask = ones(chdr(c,NPoints),1)*mask;		end;				trialdata = rd_onetr_allch(srcfid(ifile), coff(c), t, fhdr(NChan), chdr(c, NPoints));		trans_trialdata = zeros(size(trialdata,2),size(trialdata,1));		trans_trialdata = (trialdata.*trial_mask)';		eval(['avgdata' int2str(c) '= avgdata' int2str(c) '+trans_trialdata;']);		stack = stack + mask;	end 	%for t=1:chdr(c,NObs)end 	%for c=1:fhdr(NCells)end;	%for ifile =1:nfilesstack = stack/fhdr(NCells);avg_stack = (ones(size(trialdata,1),1)*stack)';precision = 'int16';%Write data to .gave filefor c = 1:fhdr(NCells)	eval(['avgdata' int2str(c) '= avgdata' int2str(c) './avg_stack;']);	eval(['fwrite(destfid, avgdata' int2str(c) ', precision);']);end;disp('Finished running make_gave.');fclose('all');status = 1;