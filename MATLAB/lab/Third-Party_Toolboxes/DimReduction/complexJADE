/********* Line by line translation from Matlab to C++ of
           m-file jade.m by JF Cardoso (cardoso@sig.enst.fr) available
           at http://sig.enst.fr/~cardoso/stuff.html .
           GSL is used for the linear algebra part.

           Compile with:
             g++ -o testJade testJade.cxx -lgsl -lgslcblas

           Notes:
             Numerical results are not identical to those obtained
             with jade.m (run under octave without any modification).

           Send bug repports to: jordi.inglada@cnes.fr ***********/

#include <math.h>
#include <stdio.h>
#include <iostream>
#include <fstream>

#include "gsl/gsl_matrix.h"
#include "gsl/gsl_blas.h"
#include "gsl/gsl_complex_math.h"
#include "gsl/gsl_permutation.h"
#include "gsl/gsl_linalg.h"
#include "gsl/gsl_eigen.h"

void jade(gsl_matrix_complex* X, int n, int T, gsl_matrix_complex* A, gsl_matrix_complex* S)
{

  //Number of eigenmatrices to be diagonalized
  const unsigned char nem = n;

  //Threshold for stopping joint diagonalization
  double seuil = 1/sqrt(T)/1000;

  /*************** Whitening of X *********************/

  /* Y = W*X; W = inv(sqrtm((X*X')/T) */

  //std::cout << "Whitening" << std::endl;

  gsl_matrix_complex* XXt =gsl_matrix_complex_calloc(n, n);

  
  // X*X'/T : \alpha A*B'+\beta C = C
  gsl_blas_zgemm (CblasNoTrans, CblasConjTrans, gsl_complex_rect(1.0/T,0.0), X, X, gsl_complex_rect(0.0,0.0), XXt);

//sqrtm(XXt)
  gsl_matrix* IW = gsl_matrix_calloc(n,n);
  for(int i=0; i<n; i++)
    for(int j=0; j<n; j++)
      gsl_matrix_set(IW,i,j,GSL_REAL(gsl_matrix_complex_get(XXt,i,j)));
  
  gsl_matrix* IV = gsl_matrix_calloc(n,n);
  gsl_matrix* IWsigma = gsl_matrix_calloc(n,n);

  gsl_vector* diago =gsl_vector_calloc(n);
  gsl_vector* work =gsl_vector_calloc(n);
  gsl_vector* IWws = gsl_vector_calloc(n);

  gsl_linalg_SV_decomp (IW, IV, diago, work);

 
  gsl_matrix* Diagonal = gsl_matrix_calloc(n,n);
  
    
  for(int i=0; i<n; i++)
    gsl_matrix_set(Diagonal,i,i,sqrt(gsl_vector_get(diago,i)));

  gsl_blas_dgemm(CblasNoTrans, CblasNoTrans, 1.0, IW, Diagonal, 0.0, IWsigma);
  gsl_blas_dgemm(CblasNoTrans, CblasNoTrans, 1.0, IWsigma, IV, 0.0, IW);

  

  // Y=inv(IW)*X

  gsl_vector_free(work);
  gsl_vector_free(IWws);
  gsl_vector_free(diago);
  gsl_matrix_free(IV);
  gsl_matrix_free(IWsigma);
  gsl_matrix_free(Diagonal);

  gsl_matrix* Wreal = gsl_matrix_calloc (n,n);
  gsl_permutation* p = gsl_permutation_calloc(n);

  /*std::cout << "IW" << std::endl;
    for(int i=0; i<n; i++)
    {
    for(int j=0; j<n; j++)
      {
      std::cout << (gsl_matrix_get(IW,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

    
  int ss;
  gsl_linalg_LU_decomp(IW, p, &ss);
  gsl_linalg_LU_invert(IW, p, Wreal);

  gsl_permutation_free(p);

  /*std::cout << "W" << std::endl;
    for(int i=0; i<n; i++)
    {
    for(int j=0; j<n; j++)
      {
      std::cout << (gsl_matrix_get(Wreal,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

  gsl_matrix_complex* W = gsl_matrix_complex_calloc (n,n);
  for(int i=0; i<n; i++)
    {
    for(int j=0; j<n; j++){
    
    gsl_matrix_complex_set(W,i,j,gsl_complex_rect(gsl_matrix_get(Wreal,i,j),0.0));
    }
        
    }

  gsl_matrix_free(Wreal);

  gsl_matrix_complex* Y=gsl_matrix_complex_calloc(n, T);

  gsl_blas_zgemm (CblasNoTrans, CblasNoTrans, gsl_complex_rect(1.0,0.0), W, X, gsl_complex_rect(0.0,0.0), Y);

  /************** Cumulant estimation *************************/
  //std::cout << "Cumulant estimation" << std::endl;
  // R = (Y*Y')/T

  gsl_matrix_complex* R =gsl_matrix_complex_calloc(n, n);

  gsl_blas_zgemm (CblasNoTrans, CblasConjTrans, gsl_complex_rect(1.0/T,0.0), Y, Y, gsl_complex_rect(0.0,0.0), R);

  // C = (Y*Y.')/T

  gsl_matrix_complex* C =gsl_matrix_complex_calloc(n, n);

  gsl_blas_zgemm (CblasNoTrans, CblasTrans, gsl_complex_rect(1.0/T,0.0), Y, Y, gsl_complex_rect(0.0,0.0), C);

  /*std::cout << "R" << std::endl;
  for(int i=0; i<n; i++)
    {
    for(int j=0; j<n; j++)
      {
      std::cout << GSL_REAL(gsl_matrix_complex_get(R,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

  gsl_matrix_complex* Yl =gsl_matrix_complex_calloc(1, T); //init to
                                                           //zero
  gsl_matrix_complex* Ykl =gsl_matrix_complex_calloc(1, T); //init to
  //zero
  gsl_matrix_complex* Yjkl =gsl_matrix_complex_calloc(1, T); //init to
                                                             //zero

  gsl_vector_complex* Q =gsl_vector_complex_calloc(n*n*n*n); //init
                                                                //to
                                                                //zero
  long int index = 0;

  for(int lx=0; lx<n; lx++)
    {
    for(int t=0; t<T; t++)
      // Yl = Y(lx,:)
      gsl_matrix_complex_set(Yl, 0, t,gsl_matrix_complex_get(Y, lx, t) );

    for(int kx=0; kx<n; kx++)
      {
      // Ykl = Yl.*conj(Y(kx,:))
      for(int t=0; t<T; t++)
        {
        gsl_complex val = gsl_complex_mul(gsl_complex_conjugate(gsl_matrix_complex_get(Y, kx, t)),gsl_matrix_complex_get(Yl,0,t));
        
        gsl_matrix_complex_set(Ykl, 0, t, val);
        }

      for(int jx=0; jx<n; jx++)
        {
        // Yjkl = Ykl.*conj(Y(jx,:))
        for(int t=0; t<T; t++)
          {
          gsl_complex val = gsl_complex_mul(gsl_complex_conjugate(gsl_matrix_complex_get(Y, jx, t)),gsl_matrix_complex_get(Ykl,0,t));
      
          gsl_matrix_complex_set(Yjkl, 0, t, val);

          }

        for(int ix=0; ix<n; ix++)
          {

          //Yjkl*Y(ix:).'/T
          gsl_complex tA = gsl_complex_rect(0.0,0.0);
          for(int t=0; t<T; t++)
            {
            tA=gsl_complex_add(tA,gsl_complex_mul(gsl_matrix_complex_get(Yjkl,0,t),gsl_matrix_complex_get(Y,ix,t)));
            }
          tA=gsl_complex_mul_real(tA,double(1.0/T));

          gsl_complex tB = gsl_complex_mul(gsl_matrix_complex_get(R,ix,jx),gsl_matrix_complex_get(R,lx,kx));
          gsl_complex tC = gsl_complex_mul(gsl_matrix_complex_get(R,ix,kx),gsl_matrix_complex_get(R,lx,jx));
          gsl_complex tD = gsl_complex_mul(gsl_matrix_complex_get(C,ix,lx),
                                           gsl_complex_conjugate(
                                             gsl_matrix_complex_get(C,jx,kx)));

          gsl_vector_complex_set(Q,index,gsl_complex_sub(gsl_complex_sub(gsl_complex_sub(tA,tB),tC),tD));
          
          
          
          index++;
          }
        }

      }

    }

  /*** Computation and reshaping of significant eigenmatrices ****/

  //std::cout << "Reshaping" << std::endl;

  // QQ = reshape(Q,n*n,n*n)
  gsl_matrix_complex* QQ =gsl_matrix_complex_calloc(n*n, n*n);

  for(int i=0; i<n*n; i++)
    for(int j=0; j<n*n; j++)
      gsl_matrix_complex_set(QQ,i,j,gsl_vector_complex_get(Q,j+n*n*i));

  /*std::cout << "QQ" << std::endl;
  for(int i=0; i<n*n; i++)
    {
    for(int j=0; j<n*n; j++)
      {
      std::cout << GSL_REAL(gsl_matrix_complex_get(QQ,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

  gsl_vector_complex_free(Q);

  // [U,D] = eig(QQ)

  gsl_matrix_complex* U =gsl_matrix_complex_calloc(n*n, n*n);
  gsl_vector* evals =gsl_vector_calloc(n*n);

  gsl_eigen_hermv_workspace* ews = gsl_eigen_hermv_alloc(n*n);

  gsl_eigen_hermv(QQ, evals, U, ews);

  gsl_eigen_hermv_free(ews);

  /*std::cout << "U" << std::endl;
  for(int i=0; i<n*n; i++)
    {
    for(int j=0; j<n*n; j++)
      {
      std::cout << GSL_REAL(gsl_matrix_complex_get(U,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

  //sorting
  gsl_eigen_hermv_sort(evals, U, GSL_EIGEN_SORT_ABS_ASC);

  //reshaping
  gsl_matrix_complex* M = gsl_matrix_complex_calloc(n,nem*n);
  gsl_vector_complex* Z = gsl_vector_complex_calloc(n);

  int h = n*n-1;
  for(int u=0; u<nem*n; u+=n)
    {

    for(int i=0; i<n; i++)
      gsl_vector_complex_set(Z,i,gsl_matrix_complex_get(U,i,h));

    for(int i=0; i<n; i++)
      for(int j=u; j<u+n-1; j++)
        gsl_matrix_complex_set(M,i,j,gsl_complex_mul_real(gsl_vector_complex_get(Z,i),gsl_vector_get(evals,h)));

    h--;
    }

  /*std::cout << "M" << std::endl;
  for(int i=0; i<n; i++)
    {
    for(int j=0; j<nem*n; j++)
      {
      std::cout << GSL_REAL(gsl_matrix_complex_get(M,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

  /************** Joint approximate diagonalization *****/

  //std::cout << "Diagonalization" << std::endl;
  
  gsl_matrix_complex* B = gsl_matrix_complex_calloc(3,3);

  gsl_matrix_complex_set(B,0,0,gsl_complex_rect(1,0));
  gsl_matrix_complex_set(B,1,1,gsl_complex_rect(1,0));
  gsl_matrix_complex_set(B,1,2,gsl_complex_rect(1,0));
  gsl_matrix_complex_set(B,2,1,gsl_complex_rect(0,-1));
  gsl_matrix_complex_set(B,2,2,gsl_complex_rect(0,1));

  gsl_matrix_complex* Bt = gsl_matrix_complex_calloc(3,3);

  for(int i=0; i<3; i++)
    for(int j=0; j<3; j++)
      gsl_matrix_complex_set(Bt,i,j,gsl_complex_conjugate(gsl_matrix_complex_get(B,j,i)));

  gsl_matrix_complex* g = gsl_matrix_complex_calloc(3,nem);
  gsl_matrix_complex* G = gsl_matrix_complex_calloc(2,2);
  gsl_matrix_complex* Gt = gsl_matrix_complex_calloc(2,2);
  gsl_matrix_complex* lD = gsl_matrix_complex_calloc(3,3);
  gsl_matrix_complex* lla = gsl_matrix_complex_calloc(3,1);
  gsl_matrix_complex* K = gsl_matrix_complex_calloc(3,3);
  gsl_vector* angles = gsl_vector_calloc(3);
  gsl_matrix_complex* pair = gsl_matrix_complex_calloc(1,2);

  double c;
  gsl_complex s;

  //init
  bool encore = 1;
  long int iters = 0;

  gsl_matrix_complex* V = gsl_matrix_complex_calloc(n,n);
  gsl_matrix_complex_set_identity(V);

  while(encore)
    {
    encore = 0;
    iters++;

    for(int p=0; p<n-1; p++)
      {
      for(int q=p+1; q<n; q++)
        {

        int Iq=q;
        int cc=0;
        for(int Ip=p; Ip<nem*n; Ip+=n)
          {

          gsl_matrix_complex_set(g,0,cc,gsl_complex_sub(
                                   gsl_matrix_complex_get(M,p,Ip),
                                   gsl_matrix_complex_get(M,q,Iq)));
          gsl_matrix_complex_set(g,1,cc,gsl_matrix_complex_get(M,p,Iq));
          gsl_matrix_complex_set(g,2,cc,gsl_matrix_complex_get(M,q,Ip));
          Iq+=n;
          cc++;
          }

            
        gsl_matrix_complex* BggtBt = gsl_matrix_complex_calloc(3,3);
        gsl_matrix_complex* BggtBt1 = gsl_matrix_complex_calloc(3,3);
        gsl_matrix_complex* BggtBt2 = gsl_matrix_complex_calloc(3,3);
        gsl_matrix* BggtBtR = gsl_matrix_calloc(3,3);
        

        //g*g'
        gsl_blas_zgemm (CblasNoTrans, CblasConjTrans, gsl_complex_rect(1.0,0.0), g, g, gsl_complex_rect(0.0,0.0), BggtBt1);

        //g*g'*B'
        gsl_blas_zgemm (CblasNoTrans, CblasConjTrans, gsl_complex_rect(1.0,0.0), B, BggtBt1, gsl_complex_rect(0.0,0.0), BggtBt2);

        //B*g*g'*B'
        gsl_blas_zgemm (CblasNoTrans, CblasConjTrans, gsl_complex_rect(1.0,0.0),BggtBt2, B, gsl_complex_rect(0.0,0.0), BggtBt);

        for(int i=0; i<3; i++)
          for(int j=0; j<3; j++)
            gsl_matrix_set(BggtBtR,i,j,GSL_REAL(gsl_matrix_complex_get(BggtBt,i,j)));

        gsl_matrix_complex_free(BggtBt);
        gsl_matrix_complex_free(BggtBt1);
        gsl_matrix_complex_free(BggtBt2);

        gsl_eigen_symmv_workspace* ws = gsl_eigen_symmv_alloc(3);

        gsl_vector* evals = gsl_vector_calloc(3);
        gsl_matrix* vcp = gsl_matrix_calloc(3,3);
        
        gsl_eigen_symmv(BggtBtR, evals, vcp, ws);

        gsl_eigen_symmv_free(ws);
        gsl_matrix_free(BggtBtR);

        gsl_eigen_symmv_sort(evals, vcp, GSL_EIGEN_SORT_ABS_ASC);

        for(int i=0; i<3; i++)
          gsl_vector_set(angles,i,gsl_matrix_get(vcp,i,2));

        gsl_matrix_free(vcp);
        gsl_vector_free(evals);
        
        if(gsl_vector_get(angles,0)<0)
          for(int i=0; i<3; i++)
            gsl_vector_set(angles,i,-1.0*gsl_vector_get(angles,i));

        c = sqrt(0.5+gsl_vector_get(angles,0)/2);

        s = gsl_complex_mul_real(gsl_complex_conjugate(gsl_complex_rect(gsl_vector_get(angles,1),gsl_vector_get(angles,2))),0.5/c);
        
        

        
        //std::cout << "Iteration " << iters << "; angle " << gsl_complex_abs(s) << std::endl;
        if(gsl_complex_abs(s) > seuil)
          {

          encore = 1;

          gsl_matrix_complex_set(G, 0, 0, gsl_complex_rect(c,0.0));
          gsl_matrix_complex_set(G, 0, 1, gsl_complex_negative(gsl_complex_conjugate(s)));
          gsl_matrix_complex_set(G, 1, 0, s);
          gsl_matrix_complex_set(G, 1, 1, gsl_complex_rect(c,0.0));

          gsl_permutation* cp = gsl_permutation_calloc(n);
          gsl_linalg_complex_LU_invert(G, cp, Gt);
          gsl_permutation_free(cp);
        
          for(int i=0; i<n; i++)
            {
            gsl_complex a,b;

            a= gsl_complex_add(
              gsl_complex_mul(gsl_matrix_complex_get(V,i,p),gsl_matrix_complex_get(G,0,0)),
              gsl_complex_mul(gsl_matrix_complex_get(V,i,q),gsl_matrix_complex_get(G,1,0))
              );

            b= gsl_complex_add(
              gsl_complex_mul(gsl_matrix_complex_get(V,i,p),gsl_matrix_complex_get(G,0,1)),
              gsl_complex_mul(gsl_matrix_complex_get(V,i,q),gsl_matrix_complex_get(G,1,1))
              );

            gsl_matrix_complex_set(V,i,p,a);
            gsl_matrix_complex_set(V,i,q,b);
            }

          for(int i=0; i<n; i++)
            {
            gsl_complex a,b;
          
          
            a = gsl_complex_add(
              gsl_complex_mul(gsl_matrix_complex_get(M,p,i),gsl_matrix_complex_get(Gt,0,0)),
              gsl_complex_mul(gsl_matrix_complex_get(M,q,i),gsl_complex_conjugate(gsl_matrix_complex_get(Gt,0,1)))
              );
        
            b= gsl_complex_add(
              gsl_complex_mul(gsl_matrix_complex_get(M,p,i),gsl_complex_conjugate(gsl_matrix_complex_get(Gt,1,0))),
              gsl_complex_mul(gsl_matrix_complex_get(M,q,i),gsl_matrix_complex_get(Gt,1,1))
              );
            gsl_matrix_complex_set(M,p,i,a);
            gsl_matrix_complex_set(M,q,i,b);
            }

        

          for(int i=0; i<n; i++)
            {

            int iq=q;
            for(int ip=p; ip<nem*n; ip+=n)
              //for(int iq=q; iq<nem*n; iq+=n)
              {
              gsl_matrix_complex_set(M,i,ip,
                                     gsl_complex_add(
                                       gsl_complex_mul_real(gsl_matrix_complex_get(M,i,ip),c),
                                       gsl_complex_mul(gsl_matrix_complex_get(M,i,iq),s)));
              gsl_matrix_complex_set(M,i,iq,
                                     gsl_complex_add(
                                       gsl_complex_mul_real(gsl_matrix_complex_get(M,i,iq),c),
                                       gsl_complex_mul(gsl_matrix_complex_get(M,i,ip),gsl_complex_negative(gsl_complex_conjugate(s)))));

              iq+=n;
              }

            }

          }
        }

      }

    }

  //std::cout << "Stopped after " << iters << " iterations." << std::endl;

  /************ Estimation of the mixing matrix and the the sources *******/

  for(int i=0; i<n; i++)
    for(int j=0; j<n; j++)
      gsl_matrix_complex_set(XXt,i,j,gsl_complex_rect(gsl_matrix_get(IW,i,j),0.0));

  gsl_blas_zgemm (CblasNoTrans, CblasNoTrans, gsl_complex_rect(1.0,0.0), XXt, V, gsl_complex_rect(0.0,0.0), A);

  gsl_blas_zgemm (CblasConjTrans, CblasNoTrans, gsl_complex_rect(1.0,0.0), V, Y, gsl_complex_rect(0.0,0.0), S);

  /*std::cout << "V" << std::endl;
    for(int i=0; i<n; i++)
    {
    for(int j=0; j<n; j++)
      {
      std::cout << GSL_REAL(gsl_matrix_complex_get(V,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

  gsl_matrix_free(IW);
  gsl_matrix_complex_free(XXt);
  gsl_matrix_complex_free(Y);
  gsl_matrix_complex_free(W);

}

/******* Toy test program **********/
int main(int argc, char* argv[])
{

  int n = 2; //sensors
  int T = 100; //samples

  // X = A*S

  //Each column of X is a sample of the n sensors
  gsl_matrix_complex* X=gsl_matrix_complex_calloc(n, T);

  //Sources
  gsl_matrix_complex* S=gsl_matrix_complex_calloc(n, T);
  for(int i=0; i<T; i++)
    {
    gsl_matrix_complex_set(S,0,i,gsl_complex_rect(sin(0.5*i),0.0));
    gsl_matrix_complex_set(S,1,i,gsl_complex_rect(sin(0.7*i),0.0));
    }

  //Mixing matrix
  gsl_matrix_complex* A=gsl_matrix_complex_calloc(n, n);
  gsl_matrix_complex_set(A,0,0,gsl_complex_rect(0.8,0.0));
  gsl_matrix_complex_set(A,0,1,gsl_complex_rect(0.2,0.0));
  gsl_matrix_complex_set(A,1,0,gsl_complex_rect(0.2,0.0));
  gsl_matrix_complex_set(A,1,1,gsl_complex_rect(0.8,0.0));

  gsl_blas_zgemm (CblasNoTrans, CblasNoTrans, gsl_complex_rect(1.0,0.0), A, S, gsl_complex_rect(0.0,0.0), X);

  std::ofstream f1;
  f1.open("s1.txt");
  for(int i=0; i<T; i++)
    f1 << GSL_REAL(gsl_matrix_complex_get(S,0,i)) << std::endl;
  f1.close();

  std::ofstream f2;
  f2.open("s2.txt");
  for(int i=0; i<T; i++)
    f2 << GSL_REAL(gsl_matrix_complex_get(S,1,i)) << std::endl;
  f2.close();

  f1.open("obs1.txt");
  for(int i=0; i<T; i++)
    f1 << GSL_REAL(gsl_matrix_complex_get(X,0,i)) << std::endl;
  f1.close();

  f2.open("obs2.txt");
  for(int i=0; i<T; i++)
    f2 << GSL_REAL(gsl_matrix_complex_get(X,1,i)) << std::endl;
  f2.close();

  
  jade(X, n, T, A, S);

  /*std::cout << "Estimated Mixing Matrix:" << std::endl;
  for(int i=0; i<n; i++)
    {
    for(int j=0; j<n; j++)
      {
      std::cout << GSL_REAL(gsl_matrix_complex_get(A,i,j)) << " ";
      }
    std::cout << std::endl;
    }*/

  f1.open("shat1.txt");
  for(int i=0; i<T; i++)
    f1 << GSL_REAL(gsl_matrix_complex_get(S,0,i)) << std::endl;
  f1.close();

  f2.open("shat2.txt");
  for(int i=0; i<T; i++)
    f2 << GSL_REAL(gsl_matrix_complex_get(S,1,i)) << std::endl;
  f2.close();

  
    
  return 0;
} 