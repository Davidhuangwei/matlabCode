function [newDataMatStruct outlierStruct] = RemoveOutliers(dataMatStruct,varargin)
% function [newDataMatStruct outlierStruct] = RemoveOutliers6(dataMatStruct,depthVar,nStdDev)
% [depthVar,nStdDev] = DefaultArgs(varargin,{0,3});
% depthVar determines how far up the tree the outliers are "shared"
% nStdDev determines # of stds is considered an outlier

[depthVar,nStdDev] = DefaultArgs(varargin,{0,3});

cellConvertBool = 0;
if ~iscell(dataMatStruct)
    dataMatStruct = {dataMatStruct};
    cellConvertBool = 1;
end
[outlierStruct tempCounter] = CalcOutliers(dataMatStruct,depthVar,nStdDev);

for i=1:length(dataMatStruct)
    newDataMatStruct{i} = DeleteOutliers(dataMatStruct{i},outlierStruct);
end
if cellConvertBool
    newDataMatStruct = cell2mat(newDataMatStruct);
end
return

function [outlierStruct counter] = CalcOutliers(dataMatStruct,depthVar,nStdDev)
% Decends into a cell array of structs (identical tree) for which the conclusion of
% each branch is a vector. Calculates outliers of each of these vectors.
% depthVar determines how far up the tree the outliers are "shared"
% nStdDev determines # of stds is considered an outlier
if ~isstruct(dataMatStruct{1})
    outlierStruct = zeros(size(dataMatStruct{1}));
    for i=1:length(dataMatStruct)
        if 0
            centerPoint = mean(dataMatStruct{i});
        else
            centerPoint = median(dataMatStruct{i});
        end
        upperLim = centerPoint + nStdDev*std(dataMatStruct{i});
        lowerLim = centerPoint - nStdDev*std(dataMatStruct{i});
        outlierStruct = outlierStruct | (dataMatStruct{i} > upperLim) | (dataMatStruct{i} < lowerLim);
    end
    counter = 1;
    return
else
    fields = fieldnames(dataMatStruct{1});
    for i=1:length(fields)
        for j=1:length(dataMatStruct)
            inDataMatStruct{j} = dataMatStruct{j}.(fields{i});
        end
        [tempOutliers counter] = CalcOutliers(inDataMatStruct,depthVar,nStdDev);
        if counter > depthVar
            outlierStruct.(fields{i}) = tempOutliers;
        else 
            if ~exist('outlierStruct','var')
                outlierStruct = tempOutliers;
            else
                outlierStruct = outlierStruct | tempOutliers;
            end
        end
    end
    counter = counter + 1;
    return
end


