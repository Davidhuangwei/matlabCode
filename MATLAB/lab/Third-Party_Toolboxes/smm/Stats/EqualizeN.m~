function outputStruct = EqualizeN(inputData,sameIndexesDepth)
[sameIndexesDepth] = DefaultArgs(varargin,{0})


if ~iscell(inputData)
    inputData = {inputData};

fields = fieldnames(depStruct);
depCell = Struct2CellArray(inputData{1},[],1);
for j=1:size(tempCell,1)
    nTrials(j) = size(depCell{j,end};
end
shortestLen = min(nTrials);
    
outputStruct = blahblah(inputData,shortestLen,sameIndexesDepth)

function outputStruct = blahblah(inputData,shortestLen,varargin)
[sameIndexesDepth] = DefaultArgs(varargin,{0});

%decend
function [outlierStruct counter] = CalcOutliers(dataMatStruct,depthVar,nStdDev)
% Decends into a cell array of structs (identical tree) for which the conclusion of
% each branch is a vector. Calculates outliers of each of these vectors.
% depthVar determines how far up the tree the outliers are "shared"
% nStdDev determines # of stds is considered an outlier
if ~isstruct(dataMatStruct{1})
    indexesStruct = 
    counter = 1;
    return
else
    fields = fieldnames(dataMatStruct{1});
    for i=1:length(fields)
        for j=1:length(dataMatStruct)
            inDataMatStruct{j} = dataMatStruct{j}.(fields{i});
        end
        [tempOutliers counter] = CalcOutliers(inDataMatStruct,depthVar,nStdDev);
        if counter > depthVar
            outlierStruct.(fields{i}) = tempOutliers;
        else 
            if ~exist('outlierStruct','var')
                outlierStruct = tempOutliers;
            else
                outlierStruct = outlierStruct | tempOutliers;
            end
        end
    end
    counter = counter + 1;
    return
end

function [outlierStruct counter] = CalcOutliers(dataMatStruct,shortestLen,sameIndexesDepth)
if ~isstruct(dataMatStruct{1})
    counter = 1;
    return
else
    fields = fieldnames(dataMatStruct{1});
    for i=1:length(fields)
        for j=1:length(dataMatStruct)
            inDataMatStruct{j} = dataMatStruct{j}.(fields{i});
        end
        [tempOutliers counter] = CalcOutliers(inDataMatStruct,shortestLen,sameIndexesDepth);
        if counter > sameIndexesDepth
            outlierStruct.(fields{i}) = tempOutliers;
        else 
            if ~exist('outlierStruct','var')
                outlierStruct = tempOutliers;
            else
                outlierStruct = outlierStruct | tempOutliers;
            end
        end
    end
    counter = counter + 1;
    return
end


if isstruct(inputData{1})
    fields = fieldNames(
    
    
    function newDataMatStruct = DeleteOutliers(dataMatStruct,outlierStruct)
% removes outliers designated by CalcOutliers
newDataMatStruct = [];
if ~isstruct(dataMatStruct)
    dataMatStruct(outlierStruct(:),:,:,:,:,:,:,:,:) = [];
    newDataMatStruct = dataMatStruct;
else
    fields = fieldnames(dataMatStruct);
    for i=1:length(fields)
        if isstruct(outlierStruct)
            newDataMatStruct.(fields{i}) = DeleteOutliers(dataMatStruct.(fields{i}),outlierStruct.(fields{i}));
        else
            newDataMatStruct.(fields{i}) = DeleteOutliers(dataMatStruct.(fields{i}),outlierStruct);
        end
    end
end
return


function [outlierStruct counter] = CalcOutliers(dataMatStruct,depthVar,nStdDev)
% Decends into a cell array of structs (identical tree) for which the conclusion of
% each branch is a vector. Calculates outliers of each of these vectors.
% depthVar determines how far up the tree the outliers are "shared"
% nStdDev determines # of stds is considered an outlier
if ~isstruct(dataMatStruct{1})
    outlierStruct = zeros(size(dataMatStruct{1}));
    for i=1:length(dataMatStruct)
        if 0
            centerPoint = mean(dataMatStruct{i});
        else
            centerPoint = median(dataMatStruct{i});
        end
        upperLim = centerPoint + nStdDev*std(dataMatStruct{i});
        lowerLim = centerPoint - nStdDev*std(dataMatStruct{i});
        outlierStruct = outlierStruct | (dataMatStruct{i} > upperLim) | (dataMatStruct{i} < lowerLim);
    end
    counter = 1;
    return
else
    fields = fieldnames(dataMatStruct{1});
    for i=1:length(fields)
        for j=1:length(dataMatStruct)
            inDataMatStruct{j} = dataMatStruct{j}.(fields{i});
        end
        [tempOutliers counter] = CalcOutliers(inDataMatStruct,depthVar,nStdDev);
        if counter > depthVar
            outlierStruct.(fields{i}) = tempOutliers;
        else 
            if ~exist('outlierStruct','var')
                outlierStruct = tempOutliers;
            else
                outlierStruct = outlierStruct | tempOutliers;
            end
        end
    end
    counter = counter + 1;
    return
end







    for j=1:length(fields)
        indexes = sort(randsample(size(depStruct.(fields{j}),1),shortestLen));
        depStruct.(fields{j}) = depStruct.(fields{j})(indexes,:,:);
        for k=1:length(contIndepCell)
            contCellStruct{k}.(fields{j}) = contCellStruct{k}.(fields{j})(indexes,:,:);
        end
    end
end
