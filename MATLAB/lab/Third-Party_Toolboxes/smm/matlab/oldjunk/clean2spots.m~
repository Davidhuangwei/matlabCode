function clean2spots(spots, GoodSpots, NonSyncCnt )
figure(10); hold on
[m,n]=size(GoodSpots)
NewGoodSpots = zeros(m,1);
SpotsTooClose = 1;
plot(spots(GoodSpots,3),spots(GoodSpots,4),'.');

% first the part of the program eliminates frames in which there are two spots and they are too far apart to be real
% it plots in red a line connecting the spots from the to be rejected frames.

i=1;
while(i<=m)
  if (NonSyncCnt(1+spots(GoodSpots(i),1))==1 )
     NewGoodSpots(i) = 1;
     i=i+1;
  else
     if ((((spots(GoodSpots(i),3) - spots(GoodSpots(i+1),3))^2 + (spots(GoodSpots(i),4) - spots(GoodSpots(i+1),4))^2)^(1/2)) < 20 )
       NewGoodSpots(i) = 1;
       NewGoodSpots(i+1) = 1;
     else
       plot([spots(GoodSpots(i),3), spots(GoodSpots(i+1),3)],[ spots(GoodSpots(i),4), spots(GoodSpots(i+1),4)],'r');
     end
     i = i+2;
  end
end

GoodSpots = GoodSpots(find(NewGoodSpots == 1));
[m,n]=size(GoodSpots)


% This part of the program determines if there are large jumps in the frame to frame location of the 
% spots specifically, if the spot in frame B is more than twice as far from A than B is from C, and 
% |B-A| is above a threshold, B is probably junk and should be tossed. The program uses resursion to 
% determine if large jumps occur for several successive frames (up to 500, the set
% recursion limit).

set(0,'RecursionLimit',500)

NewGoodSpots = zeros(m,1);
NewGoodSpots(1) = 1; % the first frame is assumed to be good

A=1;
if (NonSyncCnt(1+spots(GoodSpots(A),1))==1 ) % if there's one spot in frame A
  Aoffset = 0;
else % if there are 2 spots in frame A
  Aoffset = 1;
end
B = A+1+Aoffset;
if (NonSyncCnt(1+spots(GoodSpots(B),1))==1 )
  Boffset = 0;
else 
  Boffset = 1;
end
C = B+1+Boffset;

while (C+1<=m)    
  if (NonSyncCnt(1+spots(GoodSpots(C),1))==1 )
    Coffset = 0;
  else 
    Coffset = 1;
  end
  if (recursiveTrackClean(spots, GoodSpots, NonSyncCnt, m, A, B, C) == 1) % if true, should keep B
    NewGoodSpots(B) = 1;
    if (NonSyncCnt(1+spots(GoodSpots(B),1))==2 )
       NewGoodSpots(B+1) = 1;
    end
    A = B;
    B = C;
    C = C+1+Coffset;
  else % otherwise drop B
    B = C;
    C = C+1+Coffset;
  end
end

GoodSpots = GoodSpots(find(NewGoodSpots == 1));
[m,n]=size(GoodSpots)

