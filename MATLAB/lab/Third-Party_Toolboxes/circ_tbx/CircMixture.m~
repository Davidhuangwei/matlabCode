%function out = Vector_Stats_TwoModes5(Ph,InitPars, MaxItr, TolerX)
function out = Vector_Stats_TwoModes5(Ph,varargin)
[InitPars, MaxItr, TolerX] = DefaultArgs(varargin,{
% Bimodal fit of circular data - separates out two components of mixture
% Sets up to use LS algorithm for fit
% See Fisher, 1993, p 97 (note typo on Kappa2 in (4.58)
% Input variables:
%   Ph: Azimuths to be processed, in radians
%   InitPars: Initial estimates of the parameters, in order:
%         Kappa1, Mean1, Kappa2, Mean2, proportion1
%   MaxItr: maximum number of iterations
%   TolerX: tolerance for iterating

% Calculate trig moments used by least-squares method

C1 = cos(Ph);
C2 = cos(2*Ph);
C3 = cos(3*Ph);
S1 = sin(Ph);
S2 = sin(2*Ph);
S3 = sin(3*Ph);

CSarr = zeros(6,1);
CSarr(1) = mean(C1);
CSarr(2) = mean(C2);
CSarr(3) = mean(C3);
CSarr(4) = mean(S1);
CSarr(5) = mean(S2);
CSarr(6) = mean(S3);

% pt10=sprintf(['   Calculated trigonometric averages\n', ...
%               '             Avg Cos       Avg Sin\n']);
% pt11=sprintf(['     1       %.5g      %.5g     \n', ...
%               '     2       %.5g      %.5g     \n', ...
%               '     3       %.5g      %.5g     \n'], ...
%            CSarr(1), CSarr(4), CSarr(2), CSarr(5), CSarr(3), CSarr(6));
%
% % set up for least-squares routine
%
% pt5=sprintf(['   Initial estimates for iteration: \n', ...
%              '   Kappa1, Mean1, Kappa2, Mean2, Proportion1\n', ...
%              '   %.5g, %.1f, %.5g, %.1f, %.3f \n'], ...
%              InitPars(1), InitPars(2)*57.3, ...
%              InitPars(3), InitPars(4)*57.3, InitPars(5));

lb = [0,    0,       0,    0,       0.05];
ub = [1000, 6.28318, 1000, 6.28318, 0.95];

% pt6=sprintf(['   Lower bounds on estimates: \n', ...
%              '   %.5g, %.1f, %.5g, %.1f, %.3f \n'], ...
%              lb(1), lb(2)*57.3, lb(3), lb(4)*57.3, lb(5));
% pt7=sprintf(['   Upper bounds on estimates: \n', ...
%              '   %.5g, %.1f, %.5g, %.1f, %.3f \n'], ...
%              ub(1), ub(2)*57.3, ub(3), ub(4)*57.3, ub(5));

options = optimset('Display', 'iter', 'MaxIter', MaxItr, 'TolX', TolerX);

[x,resnorm,residual,exitflag,output] = lsqnonlin('TwoModesLS', ...
    InitPars, lb, ub, options, CSarr);

% estimates of the two components

estimates = x;
estimates(2) = estimates(2)*180/pi;
estimates(4) = estimates(4)*180/pi;

if exitflag > 0
    iter=output.iterations;
    fprintf('Function converged to solution in %.0f iterations\n',...
        iter);
else
    if exitflag < 0
        fprintf(['Function did not converge to a solution\n', ...
            'Following values show last results\n']);
    else
        fprintf(['Maximum number of iterations exceeded %.0f\n',...
            'Following values show last results\n'], MaxItr);
    end
end

fprintf(['   Estimates of two components: \n', ...
    '   Kappa1, Mean1, Kappa2, Mean2, Proportion1\n', ...
    '   %.5g, %.1f, %.5g, %.1f, %.3f \n'], ...
    estimates(1), estimates(2), ...
    estimates(3), estimates(4), estimates(5));

out.th0 = estimates([2 4])';
out.k = estimates([1 2])';
out.proportion = estimates(5);


return

%aux function for LS fit
function F = TwoModesLS(x, CSarr)


% Calculates the 6 terms F in the function that is being optimized
% for separating the components of a mixture of two von Mises dists.

% Variables input:
%  x = 5-component vector of current estimates of parameters
%   x(1) = kappa 1    x(2) = theta 1
%   x(3) = kappa 2    x(4) = theta 2
%   x(5) = alfa (proportion of N for mode 1 vs all N)
%  CSarr = 6-component array of trig moments
%   1: sum(cos(Azim))/N  2: sum(cos(2*Azim))/N   3: sum(cos(3*Azim))/N
%   4: sum(sin(Azim))/N  5: sum(sin(2*Azim))/N   6: sum(sin(3*Azim))/N
% Variable output:
%  F = vector of 6 calculated terms

% Reference: Fisher, 1993, p. 97

% set up useful functions

besl10 = besseli(0, x(1));
besl11 = besseli(1, x(1));
besl30 = besseli(0, x(3));
besl31 = besseli(1, x(3));

A11 = besl11/besl10;
A12 = 1 - 2*A11/x(1);
A13 = A11 - 4*A12/x(1);
A31 = besl31/besl30;
A32 = 1 - 2*A31/x(3);
A33 = A31 - 4*A32/x(3);

%calculate components of F

F(1) = x(5)*A11*cos(x(2))   + (1-x(5))*A31*cos(x(4))   - CSarr(1);
F(2) = x(5)*A12*cos(2*x(2)) + (1-x(5))*A32*cos(2*x(4)) - CSarr(2);
F(3) = x(5)*A13*cos(3*x(2)) + (1-x(5))*A33*cos(3*x(4)) - CSarr(3);
F(4) = x(5)*A11*sin(x(2))   + (1-x(5))*A31*sin(x(4))   - CSarr(4);
F(5) = x(5)*A12*sin(2*x(2)) + (1-x(5))*A32*sin(2*x(4)) - CSarr(5);
F(6) = x(5)*A13*sin(3*x(2)) + (1-x(5))*A33*sin(3*x(4)) - CSarr(6);

return


